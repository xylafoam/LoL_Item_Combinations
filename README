The programs provided are mainly intended to help users craft builds for characters in the game League of Legends. 



programs "stat", "prime" and "list" used to create item list


note: 	For programs "stat" and "prime" the text files they read from will need each item's name to 
	appear twice for the programs to output the names properly.

stat:	creates a text file with the following format for each item.
	
	<item name> <value>
	
	If the program is provided a list of items associated with the stat "Ability haste"
	then <value> will be the ammount of Ability haste the item named <item name> gives the player.
	
	The output file's name will be based on user's input and will be between one to three characters long. 
	The file extension ".txt" will be appended to the users input by the program.
	
	This program will collect data from the file "sList.txt" which has the following format for each item.
	
	<item name> <item name>	<gold cost> <gold cost> <string>	<value>	<game modes>
	
	
	This is the format the website https://leagueoflegends.fandom.com uses to display stat values of items with the same stat type.
	Users can copy a list of items from the website to "sList.txt", the program will read from "sList.txt" and 
	output a text file that can be used by the other programs. 
	
	The program will ask the user which column values should be collected from, usualy it will be the fourth column.
	neither of the two <item name> fields are considered a column.
	
	If the user wants to create a file containing the gold value for all items
	copy from the "All items base efficiency" list found at the following link
	https://leagueoflegends.fandom.com/wiki/Gold_efficiency_(League_of_Legends)
	into "sList.txt" then when prompted tell the program to get values from the first column.
	
	
prime:	Reads from a text file that contains a list of item group names and their associated items.
	Then creates a file named "GRP.txt" with the following format.
	
	<prime number>
	<item name>
	<item name>
	
	<prime number>
	<item name>
	<item name>
	<item name>
	
	
	This program will collect data from a text file, which it will prompt the user for, that has the following format.
	
	<group name>
	<item name> <item name>
	<item name> <item name>
	
	<group name>
	<item name> <item name>
	<item name> <item name>
	
	
	the groups and their items can be copied from https://leagueoflegends.fandom.com/wiki/Item_group
	
	The format will not be correct and will look as follows.
	
	<group name> <item name> <item name>
	<item name> <item name>
	<group name> <item name> <item name>
	<item name> <item name>
	
	It will need to be modified so the program can read it correctly.
	
	this program will also create a file named "nprimes" which holds a single number that represents 
	the number of groups it has processed. this file will be used by the program "combos".
	
	
	
list: 	Will use the files created by "stat" and "prime" to create a file named "items.txt" with the following format.
	
	<stat type> (<type>)  <stat type> (<type>)  <stat type> (<type>)  <stat type> (<type>) 
	<item name> <stat value> <stat value> <stat value> <stat value>
	<item name> <stat value> <stat value> <stat value> <stat value>
	<item name> <stat value> <stat value> <stat value> <stat value>
	<item name> <stat value> <stat value> <stat value> <stat value>
	
	<type> will be 'i' for integer or 'f' for float.
	
	How many different <stat type> fields appear in the file will be determined by the number of stats the user desires to include.
	which stats the user wants to included must be listed in the file "stats.txt" using the following format.
	
	<file name> <file name> <file name>
	
	The names must be placed on the same line.
	<file name> must be the name of a file created by "stat" excluding the file extension ".txt"
	
	If a user wishes to include the stats "Ability power" and "Ability haste" which 
	are contained in "AP.txt" and "AH.txt" respectively. The contents of "stats.txt" would need to be as shown below.
	
	AP AH
	
	
	This program will ask if the user wants to include gold values.
	if the user wants to include gold values for items the program "stat" will need to have been run
	to create a file containing the gold value for all items the user plans on having in their list.
	If the user wants to include gold values then the program will prompt the user for the name of the 
	file that contains the gold values of the items.
	
	This program will ask if the user wants to include a group column.
	if the user wants to include a group column the program "prime" will need to have been run
	to create the file "GRP.txt".
	
	
	
programs "combos" and "set" are used to calculate user defined expressions that have the stats of items included in them.


combos: Will test combinations of items against the provided expression to help the user find a good set of items.
	
	combos will read from "expr.txt" which should have the following format
	
	<name>
	<expression>
	
	<name>
	<expression>
	
	
	<name> should be at most three letters and should not match the name of any stat found in the file "items.txt"
	<expression> is a string that can contain the following characters + - * / ( )
	<expression> can contain numbers such as 2, 3.7 or -2.5, however negative numbers must be surrounded by parentheses 
		like so (-2.5) if they are not being used to subtract from another number.
			"3-5"  valid
			"-5+3" invalid
			"(-5)+3" valid
			
	<expression> must be surrounded by double quotes.
	<expression> can contain the <name> of previously defined expressions and the names of stats found in the file "items.txt"
		variables such as names of stats and expressions follow the same rules for negative signs that numbers follow. 
			"3-AP"  valid
			"-AP+3" invalid
			"(-AP)+3" valid
	
	<expression> A number or variable by itself should not be surrounded by parentheses unless it needs a negative sign.
			"(AP)" invalid
			"(-AP)"  valid
			"-3"   invalid
			"(-3)"   valid
	
	example "expr.txt" file: 
		
		AT
		"50+AD"
		
		TOT
		"AT*(1+0.75*CRT)"
	
	The value produced by the last expression is the value that is used to
	find the item combination with either the greatest or smallest value.
	
	
	This program needs the files "items.txt", "expr.txt"
	If the user wants to ignore illegal combinations the program needs rhe file "nprimes.txt"
	
	
	EXAMPLE RUN

	./combos 1
	Are you looking for the smallest or largest value? (Enter S or L ): L
	Enter allowed difference: 1

	Include a stat that is not found in the "expr.txt" file? (Enter yes or no): n
	Set min and max value for a variable? (Enter yes or no): n
	Ignore illegal combinations? (Enter yes or no): y
	int variable used: GRP
	Would you like to include an item? (Enter yes or no): n
	Output place in file "result.txt"

	EXAMPLE END
	
	./combos <number>									
		# command used to run the program. 
		# <number> represents how many items can be used from "items.txt" simultaneously
	
	Are you looking for the smallest or largest value? (Enter S or L ): <L or S> 
	Enter allowed difference: <val>								
		# <val> a value that represents how close to the current largest or smallest 
		# value a set has to be for it to be shown in the results
												
	Include a stat that is not found in the "expr.txt" file? (Enter yes or no): <y or n>
	
	Set min and max value for a stat? (Enter yes or no): <y or n>				
		# A minimum, maximum, and hard maximum can be set for stats for a stat.
		# if minumum is not met or hard maximum is exceeded the item set will be ignored
		# if maximum is exceeded the stat will be set equal to maximum the evaluated.
	
	Ignore illegal combinations? (Enter yes or no): <y or n>
	int variable used: GRP
	
	Would you like to include an item? (Enter yes or no): <y or n>				
		# items can be included so that every combination of <number> items will also
		# include the items you specify. use the line number a desired item is found on in "items.txt"
		# to select items.
		# simulate an item's unique effect by
		# modifying expressions in "expr.txt" and/or modify the items stats
		# then include the item when prompted.
												
	Output place in file "result.txt"							
	
	
	
	file "result.txt" will look something like the following
	 
	26 40 = 200.0000
	35 40 = 200.0000
	Best = 200.0000
	
	nembers found to the left of the equal sign represent the line of file "items.txt" to look at in order to find the items' names.
	
	
set: 	similar to program "combos" however the user selects all items they would like to use
	then the program outputs to the terminal the value those items cause the expression to equal.
	
	
	
	
	
	
	
	
	
	
	
	Help with making this README easier to understand would be greatly appreciated.
	I also am excited to see suggestions for making the code and the user interface better.
	
